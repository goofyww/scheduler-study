
[ElasticJob]
	1、ElasticJob 分片策略
		1. 平均分配分片(默认算法)
			eg：1=[0,1,2,9],2=[3,4,5],3=[6,7,8]
		2. 作业名的哈希值奇偶数决定IP升降序算法的分片策略
			eg: 奇数 →
				1=[0],2=[1],3=[ ]
				偶数 ←
				1=[ ],2=[1],3=[2]
		3. 作业名称hash值对服务器列表进行轮询
			寻找起点位置的策略，作业名hash值%总分片数=起点分片
		
	2、ElasticJob自定义分片策略
		
		实现JobShardingStrategy接口,
		
		实现sharding方法,
		
		sharding方法
			  入参:服务实例列表,Job名称,分片总数
			返回值:返回服务实例对应的分片项
		
		jobShardingStrategyClass配置分片策略类的全路径
			
	2、ElasticJob监听器
		
		监听作业执行前和作业执行后
		
		2种类型
		2.1	每个作业节点执行,无需考虑分布式
			实现:需实现 ElasticJobListener
			
		2.2 分布式场景,仅单一节点执行,整个任务只有一头一尾（谨慎使用）,作业并发执行创建zk节点可能会出现监听跑重的情况		
			实现:需继承 AbstractDistributeOnceElasticJobListener
			
		将监听器加入配置 JobScheduler
			
	3、ElasticJob zookeeper数据节点结构
		
			leader			# 主节点选举(HA)
				election
					latch
				sharding
			guarantee		# 
				started		
				completed
			servers			# 服务器列表：IP
			
			config			# Job配置
				
			instances		# 任务实例列表: IP:进程号
			
			sharding
				0 			# 分片项
				.
				N
[Quartz]
	Job					: 需要完成什么任务。Job类至少要有一个无参构造器,每次任务执行都会创建一个新对象,要避免类中定义有状态的数据属性,因为不同对象之间不能传递其值
	
	JobDetail			: Job实例的其他属性由JobDetail完成，JobDetail的名称与分组及其他
	
	JobDataMap传递参数	: 属于JobDetail的一部分,可以在构建JobDetail时传递不限量的参数
		1.可从execute方法的上下文中取出参数
		2.在Job类中定义参数名称,定义 get/set 方法
		
	定时任务的并发		: @DisallowConcurrentExecution 防止并发执行,错过触发机制
		
	JobDataMap的更新	: @PersistJobDataAfterExecution 使JobDataMap更新生效
	
	Trigger触发器		: Job什么条件下被触发
	  常用属性
		jobKey					:当trigger触发时被执行的job的身份
		startTime				:设置trigger第一次触发的时间
		endTime					:表示trigger失效的时间点
		priority				:优先级
		misfire Instructions	:错过触发机制
		calendar				:指定日期不执行,如指定只有非节假日执行
		
	Trigger触发器优先级	: 当多个Trigger同时执行,工作线程数小于Trigger工作线程数量
		优先级的比较机制
		
	SimpleTrigger
		1. 具体时间点执行一次
		2. 按照指定间隔时间重复执行若干次
		
	  常用属性 :开始时间/结束时间/重复次数/重复间隔
	  重复次数 :0,正整数,无限次执行
	  重复间隔 :0(并发执行),long(毫秒级)
	  
	  重复次数与结束时间:	最后一次的任务执行时间 > 结束时间,以结束时间为准,反之,以重复次数为准
	  
	CronTrigger
	  CronScheduleBuilder.cronSchedule("3/5 * * * * ?"))
	  
	misfire(错过触发机制)
		触发条件
		1. 指定的工作线程数小于并发执行的Trigger工作线程数
		2. 工作线程执行时长大于定时时长
		
		CronTrigger
			方法
			withMisfireHandlingInstructionDoNothing			: 不做任何事;		当前任务不会立即执行,等待下一次任务去执行
			withMisfireHandlingInstructionFireAndProceed	: 执行并且处理		一个线程结束,会立即执行错过的线程	
			withMisfireHandlingInstructionIgnoreMisfires	: 忽略Misfires机制	如果设置为智能策略,会以FireAndProceed执行处理
			
			org.quartz.jobStore.misfireThreshold=1000
			misfireThreshold: 超过这个阈值,misfire才会被触发
			
[Cron 表达式]
	
	字段		允许值		允许的特殊字符
	秒			0-59		, - * /
	分			0-59		, - * /
	时			0-23		, - * /
	月内日期	1-31		, - * ? / L W C
	月			1-12		, - * /
	周内日期	1-7			, - * ? / L C #				# 周日-周六
	年(可选)				, - * /
	
	说明
	,	枚举值,列举出的值都会生效;
	-	范围,0-N,范围内的任何一个值上都会生效;
	*	通配符,该字段内的所有值都会生效,不限定某个具体数字;
	/	指定值的增量,每隔多久生效;
	?	没有特定的值,仅允许出现在日期和星期字段;
	L	字段范围内最后的值;								eg:月内最后一天/周内最后一天(周六)。ge:星期字段5L,表示月内最后一周的周四
	W	最接近给定日期的工作日;							eg:7W 如果为周六,那么以6日时间触发生效。如果为周日,那么以8日时间触发生效
	#	当月的第几个星期几;								eg:5#3 表示当月的第三个星期四
	C	计划所关联的日历;								eg:5C 表示5号之后的第一天
	
[spring 与 Quartz 集成]
	
	Job的编写:两种形式
	1. 继承 QuartzJobBean 抽象类,实现 executeInternal 方法,作为jobClass,将类全路径传递给 JobDetailFactoryBean 工厂类
	2. 单独编写 Job类 ,作为targetObject,将bean传递给 MethodInvokingJobDetailFactoryBean 工厂类,并且指定 targetMethod 要执行的目标方法

[Listener]	编写Listener,将其注册到 scheduler 当中
	
	TriggerListener		:监听与触发器相关的事件		继承 TriggerListenerSupport 抽象类		
		实现
		triggerFired		:触发器开始
		triggerComplete		:触发器完成
		votoJobExecution	:触发器否决; 此方法若返回true,说明本次触发器将不会触发
		
	JobListener			:监听与Job相关的事件		继承 JobListenerSupport 抽象类
		实现
		jobToBeExecuted 	:Job即将执行
		jobWasExecuted		:Job执行完成
		jobExecutionVetoed	:Job不会执行(Trigger 被否决,执行此方法)
	
	ScheduleListener	:监听Schedule相关的事件		继承 SchedulerListenerSupport 抽象类
		
		添加/删除 触发器
		暂停/恢复 Job
		启动/关闭 调度器
		...

[Quartz 集群]

	集群管理,
	基于数据库方式的集群管理,需要在数据库中建立Quartz相关表
	修改 Quartz 相关配置
	
	spring
		<bean id="schedule" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" destroy-method="destroy">
        <property name="dataSource" ref="datasource"/>
        <property name="triggers">
            <list>
                <ref bean="trigger1"/>
                <ref bean="trigger2"/>
                <ref bean="trigger3"/>
            </list>
        </property>
		</bean>
		
	springboot
		#调度标识名 集群中每一个实例都必须使用相同的名称
		spring.quartz.scheduler-name=mySpringbootQuartz
		#ID设置为自动获取 每一个必须不同
		org.quartz.scheduler.instanceId=AUTO
		#线程数量
		org.quartz.threadPool.threadCount= 10
		#Job持久化类型
		spring.quartz.job-store-type=jdbc
		#是否覆盖已存在的Job
		spring.quartz.overwrite-existing-jobs=true
		#是否初始化 Quartz集群相关 的表
		spring.quartz.jdbc.initialize-schema=never
		#持久化SQL的公共前缀
		spring.quartz.jdbc.comment-prefix=#
		#等待Job执行完毕再进行关闭
		spring.quartz.wait-for-jobs-to-complete-on-shutdown=true

		spring.datasource.url=jdbc:mysql://localhost:3306/order?serverTimezone=Asia/Shanghai&useSSL=false
		spring.datasource.username=root
		spring.datasource.password=123456
		logging.pattern.dateformat=HH:mm:ss

		mybatis.mapper-locations=mybatis/*.xml	
		
[注意]
	1. MethodInvokingJobDetailFactoryBean 没有实现序列化,无法持久化到数据中,如果使用这种方式实现Job作业,
									   则无法进行集群式的管理,网上有人重新改类,可自行搜索
		
	2. MethodInvokingJobDetailFactoryBean类默认是并发执行的，这时候如果不设置“concurrent”为false，很可能带来并发或者死锁的问题，而且几率较小，不容易复现	
		
		
		
		
		
		
		
		
		
		
			
			
			
			